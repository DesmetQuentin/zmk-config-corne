/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    /* ==========================================================
     *  Custom combo + macro: Lower + Tab -> Alt+Tab (task switch)
     *  ----------------------------------------------------------
     *  NOTE: Replace the <row col> pairs in `key-positions` with
     *  the actual matrix positions for your Tab and Lower keys.
     *  Example shown assumes:
     *      - Tab  : matrix position <0 0>
     *      - Lower: matrix position <3 1>
     *  Get the correct numbers from your `kscan` matrix in the
     *  board overlay and adjust if necessary.
     * ========================================================== */

    combos {
        compatible = "zmk,combos";

        euro {
            bindings = <&euro_v1>;
            key-positions = <28 29>;
            layers = <1>;
        };

        euro_v2 {
            bindings = <&euro_v2>;
            key-positions = <27 28>;
            layers = <1>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <37 41>;
            layers = <0>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <37 29>;
            layers = <0>;
        };
    };

    macros {
        euro_v1: euro_v1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL &kp LSHFT>,
                <&macro_tap>,
                <&kp U>,
                <&macro_release>,
                <&kp LCTRL &kp LSHFT>,
                <&macro_tap>,
                <&kp KP_N2 &kp KP_N0 &kp A &kp C &kp SPACE>;

            label = "EURO_V1";
        };

        euro_v2: euro_v2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N2 &kp KP_N0 &kp A &kp C>,
                <&macro_release>,
                <&kp LALT>;

            label = "EURO_V2";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_engram {
            /* -------------------------------------------------------------
             * |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  ;  | BSPC |
             * | SHFT |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  P  |  '   |
             * | CTRL |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | RALT |
             *                    | ESC | LWR | SPC |   | ENT | RSE  | BSPC |
             * ------------------------------------------------------------- */

            bindings = <
&kp TAB    &kp B  &kp Y  &kp O     &kp U       &kp SQT      &kp BSPC  &kp L      &kp D      &kp W  &kp V  &kp Z
&kp ASTRK  &kp C  &kp I  &kp E     &kp A       &kp COMMA    &kp DOT   &kp H      &kp T      &kp S  &kp N  &kp Q
&kp LCTRL  &kp G  &kp X  &kp J     &kp K       &kp MINUS    &kp SEMI  &kp R      &kp M      &kp F  &kp P  &kp BSLH
                         &kp LALT  &kp LSHIFT  &mo 4        &kp RET   &kp SPACE  &kp UNDER
            >;
        };

        shift_engram {
            /* -------------------------------------------------------------
             * |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC|
             * | CTRL |     |     |     |     |  ~  |   |  -  |  =  |  [  |  ]  |  \  |  `  |
             * | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  "  |
             *                    | GUI |     | SPC |   | ENT |     | ALT |
             * ------------------------------------------------------------- */

            bindings = <
&kp LS(TAB)      &kp LS(B)  &kp LS(Y)  &kp LS(O)  &kp LS(U)  &kp DQT        &kp LA(BSPC)  &kp LS(L)      &kp LS(D)  &kp LS(W)  &kp LS(V)  &kp LS(Z)
&kp HASH         &kp LS(C)  &kp LS(I)  &kp LS(E)  &kp LS(A)  &kp PERCENT    &kp AMPS      &kp LS(H)      &kp LS(T)  &kp LS(S)  &kp LS(N)  &kp LS(Q)
&kp EXCLAMATION  &kp LS(G)  &kp LS(X)  &kp LS(J)  &kp LS(K)  &kp DOLLAR     &kp COLON     &kp LS(R)      &kp LS(M)  &kp LS(F)  &kp LS(P)  &kp QUESTION
                                       &mo 6      &trans     &tog 2         &kp LS(RET)   &kp LS(SPACE)  &kp AT
            >;
        };

        numerical_and_utils {
            bindings = <
&kp TAB     &none                 &kp PG_DN  &kp UP    &kp PG_UP  &kp PRINTSCREEN      &kp BSPC   &kp N7     &kp N8  &kp N9  &kp EQUAL   &kp TILDE
&kp ESCAPE  &kp C_BRIGHTNESS_INC  &kp LEFT   &kp DOWN  &kp RIGHT  &kp C_VOLUME_UP      &kp FSLH   &kp N4     &kp N5  &kp N6  &kp PLUS    &kp MINUS
&none       &kp C_BRIGHTNESS_DEC  &none      &none     &none      &kp C_VOLUME_DOWN    &kp ASTRK  &kp N1     &kp N2  &kp N3  &kp KP_DOT  &kp CARET
                                             &none     &mo 3      &to 0                &kp RET    &kp SPACE  &kp N0
            >;
        };

        f_layer {
            bindings = <
&none  &bt BT_CLR    &bt BT_CLR_ALL  &bt BT_NXT    &bt BT_PRV    &none           &none  &kp F7  &kp F8  &kp F9  &kp F12  &none
&none  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none  &kp F4  &kp F5  &kp F6  &kp F11  &none
&none  &kp A         &kp B           &kp C         &kp D         &kp E           &none  &kp F1  &kp F2  &kp F3  &kp F10  &none
                                     &none         &trans        &none           &none  &none   &none
            >;
        };

        symbols {
            bindings = <
&kp GRAVE       &kp N1     &kp N2     &kp N3     &kp N4     &kp N5                  &kp DEL                &kp N6     &kp N7     &kp N8     &kp N9     &kp N0
&kp LEFT_BRACE  &kp LC(A)  &kp LC(F)  &kp LC(H)  &kp LC(L)  &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS  &kp PG_DN  &kp UP     &kp PG_UP  &kp END    &kp RIGHT_BRACE
&kp LESS_THAN   &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LEFT_BRACKET        &kp RIGHT_BRACKET      &kp LEFT   &kp DOWN   &kp RIGHT  &kp TILDE  &kp GREATER_THAN
                                      &kp LC(Y)  &kp PIPE   &trans                  &kp LC(RET)            &kp PLUS   &kp EQUAL
            >;
        };

        french {
            bindings = <
&kp TAB  &trans  &trans  &trans  &trans  &trans    &kp DELETE  &trans     &trans          &trans  &trans  &trans
&trans   &trans  &trans  &trans  &trans  &trans    &trans      &trans     &trans          &trans  &trans  &trans
&trans   &trans  &trans  &trans  &trans  &trans    &trans      &trans     &trans          &trans  &trans  &trans
                         &trans  &trans  &trans    &kp RETURN  &kp SPACE  &kp LEFT_SHIFT
            >;
        };

        bonus {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &tog 0    &trans  &trans  &trans
            >;
        };
    };
};
