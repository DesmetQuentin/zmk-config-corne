/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    /* ==========================================================
     *  Custom combo + macro: Lower + Tab -> Alt+Tab (task switch)
     *  ----------------------------------------------------------
     *  NOTE: Replace the <row col> pairs in `key-positions` with
     *  the actual matrix positions for your Tab and Lower keys.
     *  Example shown assumes:
     *      - Tab  : matrix position <0 0>
     *      - Lower: matrix position <3 1>
     *  Get the correct numbers from your `kscan` matrix in the
     *  board overlay and adjust if necessary.
     * ========================================================== */

    behaviors {
        /* Macro that presses Alt, taps Tab, then releases Alt */

        alt_tab: alt_tab {
            compatible = "zmk,behavior-macro";
            label = "ALT_TAB_MACRO";
            #binding-cells = <0>;
            bindings = <&kp LALT &kp TAB>;
        };
    };

    combos {
        alt_tab_combo {
            timeout-ms = <60>;          /* 60â€¯ms window for combo detection */
            key-positions = <3 1 0 0>;  /* <Lower row col> <Tab row col>  */
            bindings = <&alt_tab>;      /* Runs the macro above           */
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            /* -------------------------------------------------------------
             * |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  ;  | BSPC |
             * | SHFT |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  P  |  '   |
             * | CTRL |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | RALT |
             *                    | ESC | LWR | SPC |   | ENT | RSE  | BSPC |
             * ------------------------------------------------------------- */

            bindings = <
&kp TAB    &kp Q  &kp W  &kp E  &kp R  &kp SQT     &kp BSPC  &kp T      &kp Y      &kp U  &kp I  &kp ASTERISK
&kp MINUS  &kp P  &kp S  &kp A  &kp D  &kp FSLH    &kp BSLH  &kp G      &kp H      &kp J  &kp K  &kp SEMI
&kp COMMA  &kp L  &kp Z  &kp X  &kp C  &kp F       &kp O     &kp V      &kp B      &kp N  &kp M  &kp DOT
                         &mo 4  &mo 1  &mo 5       &kp RET   &kp SPACE  &kp UNDER
            >;
        };

        shift {
            /* -------------------------------------------------------------
             * |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC|
             * | CTRL |     |     |     |     |  ~  |   |  -  |  =  |  [  |  ]  |  \  |  `  |
             * | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  "  |
             *                    | GUI |     | SPC |   | ENT |     | ALT |
             * ------------------------------------------------------------- */

            bindings = <
&kp TAB       &kp LS(Q)  &kp LS(W)  &kp LS(E)  &kp LS(R)  &kp LS(DQT)      &kp BSPC      &kp LS(T)  &kp LS(Y)  &kp LS(U)  &kp LS(I)  &kp LS(POUND)
&kp LS(DLLR)  &kp LS(P)  &kp LS(A)  &kp LS(S)  &kp LS(D)  &kp LS(PRCNT)    &kp LS(AMPS)  &kp LS(G)  &kp LS(H)  &kp LS(J)  &kp LS(K)  &kp LS(COLON)
&kp LS(EXCL)  &kp LS(L)  &kp LS(Z)  &kp LS(X)  &kp LS(C)  &kp LS(F)        &kp LS(O)     &kp LS(V)  &kp LS(B)  &kp LS(N)  &kp LS(M)  &kp LS(QMARK)
                                    &tog 2     &trans     &tog 6           &kp RET       &kp SPACE  &kp AT
            >;
        };

        numerical_and_utils {
            bindings = <
&kp TAB     &trans                &kp PG_DN  &kp UP    &kp PG_UP  &kp PRINTSCREEN      &kp BSPC   &kp N7     &kp N8  &kp N9  &kp EQUAL   &kp TILDE
&kp ESCAPE  &kp C_BRIGHTNESS_DEC  &kp LEFT   &kp DOWN  &kp RIGHT  &kp C_VOLUME_UP      &kp FSLH   &kp N4     &kp N5  &kp N6  &kp PLUS    &kp MINUS
&trans      &kp C_BRIGHTNESS_DEC  &trans     &trans    &trans     &kp C_VOLUME_DOWN    &kp ASTRK  &kp N1     &kp N2  &kp N3  &kp KP_DOT  &kp CARET
                                             &trans    &mo 3      &tog 0               &kp RET    &kp SPACE  &kp N0
            >;
        };

        f_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F7  &kp F8  &kp F9  &kp F12  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F4  &kp F5  &kp F6  &kp F11  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F1  &kp F2  &kp F3  &kp F10  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        symbols {
            bindings = <
&kp TAB         &trans    &trans  &trans  &trans  &kp GRAVE               &kp BSPC               &trans     &trans     &trans  &trans  &trans
&kp LEFT_BRACE  &trans    &trans  &trans  &trans  &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS  &trans     &trans     &trans  &trans  &kp RIGHT_BRACE
&kp LESS_THAN   &kp PIPE  &trans  &trans  &trans  &kp LEFT_BRACKET        &kp RIGHT_BRACKET      &trans     &trans     &trans  &trans  &kp GREATER_THAN
                                  &trans  &trans  &trans                  &kp RET                &kp SPACE  &kp UNDER
            >;
        };

        french {
            bindings = <
&kp TAB  &trans  &trans  &trans  &trans  &trans    &kp BSPC    &trans     &trans  &trans  &trans  &trans
&trans   &trans  &trans  &trans  &trans  &trans    &trans      &trans     &trans  &trans  &trans  &trans
&trans   &trans  &trans  &trans  &trans  &trans    &trans      &trans     &trans  &trans  &trans  &trans
                         &trans  &trans  &trans    &kp RETURN  &kp SPACE  &trans
            >;
        };

        bonus {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &tog 0    &trans  &trans  &trans
            >;
        };
    };
};
